
	/////////additional point//////////
	//column
	int point_cnt = 0;
	int point_num = 0;
	for (int i = 0; i < map_gray_process.size().width - 1; i++) {
		point_cnt = 0;
		for (int j = 0; j < map_gray_process.size().height - 1; j++) {
			// at in this case is row major, but sometimes is column major on my test function???
			if (map_gray_process.at<uint8_t>(j, i) == 0 && map_gray_process.at<uint8_t>(j + 1, i) == 0 &&
				map_gray_process.at<uint8_t>(j, i + 1) == 255 && map_gray_process.at<uint8_t>(j + 1, i + 1) == 255) {
				point_cnt++;
				point_num = 1;
				//cout << "[" << i << "," << j << "]" << endl;
			}
			else if (map_gray_process.at<uint8_t>(j, i) == 255 && map_gray_process.at<uint8_t>(j + 1, i) == 255 &&
				map_gray_process.at<uint8_t>(j, i + 1) == 0 && map_gray_process.at<uint8_t>(j + 1, i + 1) == 0) {
				point_cnt++;
				point_num = 2;
				//cout << "[" << i << "," << j << "]" << endl;

			}
			else {
				point_cnt = 0;
			}

			if (point_cnt == 1 && point_num == 1) {
				//circle(src_rgb, Point2f(i, j), radius, Scalar(255, 255, 0), FILLED);
				circle(map_rgb_process, Point2f(i, j), 2, Scalar(0, 0, 255), FILLED);
				points.push_back(Point2f(i, j));
			}
			else if (point_cnt == 1 && point_num == 2) {
				//circle(src_rgb, Point2f(i + 1, j), radius, Scalar(255, 255, 0), FILLED);
				circle(map_rgb_process, Point2f(i + 1, j), 2, Scalar(0, 0, 255), FILLED);

				points.push_back(Point2f(i + 1, j));
			}
			else if (point_cnt > 35) {//6
				point_cnt = 0;
			}

		}
	}


	//row
	point_num = 0;
	for (int j = 0; j < map_gray_process.size().height - 1; j++) {
		point_cnt = 0;
		for (int i = 0; i < map_gray_process.size().width - 1; i++) {
			if (map_gray_process.at<uint8_t>(j, i) == 0 && map_gray_process.at<uint8_t>(j, i + 1) == 0 &&
				map_gray_process.at<uint8_t>(j + 1, i) == 255 && map_gray_process.at<uint8_t>(j + 1, i + 1) == 255) {
				point_cnt++;
				point_num = 1;
				//cout << "[" << i << "," << j << "]" << endl;

			}
			else if (map_gray_process.at<uint8_t>(j, i) == 255 && map_gray_process.at<uint8_t>(j, i + 1) == 255 &&
				map_gray_process.at<uint8_t>(j + 1, i) == 0 && map_gray_process.at<uint8_t>(j + 1, i + 1) == 0) {
				point_cnt++;
				point_num = 2;
				//cout << "[" << i << "," << j << "]" << endl;

			}
			else {
				point_cnt = 0;
			}

			if (point_cnt == 2 && point_num == 1) {
				circle(map_rgb_process, Point2f(i, j), 2, Scalar(0, 0, 255), FILLED);

				points.push_back(Point2f(i, j));
			}
			else if (point_cnt == 2 && point_num == 2) {
				circle(map_rgb_process, Point2f(i, j + 1), 2, Scalar(0, 0, 255), FILLED);

				points.push_back(Point2f(i, j + 1));
			}
			else if (point_cnt > 35) {//5
				point_cnt = 0;
			}
		}
	}

remove the tri_point in voronoi function 